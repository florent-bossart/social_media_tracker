"""
AI Intelligence Center - Consolidated AI analysis page.
Combines AI Trend Summary and AI Insights into a unified intelligent dashboard.
"""

import streamlit as st
import pandas as pd
import re
from wordcloud import WordCloud
import matplotlib.pyplot as plt
from ui_library import (
    StandardComponents, StandardCharts, PageLayouts, UITheme
)
from data_manager import DataManager

def ai_intelligence_center_page():
    """Unified AI intelligence page with trend summaries and insights"""
    
    # Page header
    StandardComponents.page_header(
        title="AI Intelligence Center",
        icon="🤖",
        description="""
        **Your AI-Powered Music Intelligence Hub** - Advanced insights generated by artificial intelligence.
        
        **What you'll discover:**
        - **📈 Trend Summaries**: AI-generated analysis of current music trends and patterns
        - **🔍 Deep Insights**: Intelligent commentary on artist performance and genre evolution  
        - **📊 Predictive Analytics**: Data-driven forecasts and trend predictions
        - **🎯 Smart Search**: AI-enhanced search across all insights and findings
        - **☁️ Insight Clouds**: Visual representation of key themes and topics
        
        **AI Features:**
        - Real-time trend detection and analysis
        - Natural language insight generation
        - Cross-platform pattern recognition
        - Sentiment-aware recommendations
        """
    )

    # Load AI data
    with st.spinner("Loading AI intelligence data..."):
        trend_data = DataManager.get_trend_summary_data()
        insights_data = DataManager.get_insights_summary_data()

    # Create tabbed interface for AI analysis
    tab_config = {
        "📈 Trend Summary": lambda: trend_summary_tab(trend_data),
        "🔍 AI Insights": lambda: ai_insights_tab(insights_data),
                "📊 Intelligence Dashboard": lambda: intelligence_dashboard_tab(trend_data, insights_data)
    }
    
    PageLayouts.tabbed_content(tab_config)

def trend_summary_tab(trend_data: dict):
    """AI-generated trend summary analysis tab"""
    st.subheader("📈 AI-Generated Trend Analysis")
    
    if not trend_data or all(df.empty for df in trend_data.values() if isinstance(df, pd.DataFrame)):
        StandardComponents.empty_state(
            "No AI Trend Data Available",
            "AI trend analysis is currently being processed. Please check back later.",
            "📈"
        )
        return

    # Overview metrics
    overview_df = trend_data.get('overview', pd.DataFrame())
    if not overview_df.empty:
        metrics = []
        for _, row in overview_df.head(4).iterrows():
            metrics.append({
                "label": row.get('metric_name', 'Metric'),
                "value": row.get('value', 0),
                "delta": row.get('change', 0)
            })
        StandardComponents.metric_cards(metrics)
        st.markdown("---")

    # Genre and Artist Analysis
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.subheader("🎵 Genre Popularity Trends")
        genres_df = trend_data.get('genres', pd.DataFrame())
        if not genres_df.empty:
            # Create genre popularity chart
            fig = StandardCharts.create_pie_chart(
                genres_df,
                values='popularity_score',
                names='genre',
                title="Genre Distribution (AI Normalized)"
            )
            st.plotly_chart(fig, use_container_width=True)
            
            # Show normalization info
            if 'normalized_count' in genres_df.columns:
                total_merged = genres_df['normalized_count'].sum()
                if total_merged > 0:
                    st.info(f"ℹ️ AI normalized {total_merged} duplicate genre entries for cleaner analysis")
    
    with col2:
        st.subheader("🏆 Top Trending Artists")
        artists_df = trend_data.get('artists', pd.DataFrame())
        if not artists_df.empty:
            for _, artist in artists_df.head(5).iterrows():
                st.metric(
                    artist.get('artist_name', 'Unknown'),
                    f"{artist.get('trend_score', 0):.1f}",
                    f"{artist.get('growth_rate', 0):+.1f}%"
                )
    
    # Sentiment Analysis
    st.subheader("💭 AI Sentiment Pattern Analysis")
    sentiment_df = trend_data.get('sentiment_patterns', pd.DataFrame())
    engagement_df = trend_data.get('engagement_levels', pd.DataFrame())
    
    col1, col2 = st.columns(2)
    with col1:
        if not sentiment_df.empty:
            st.subheader("📊 Sentiment Distribution")
            # Show sentiment metrics
        else:
            st.info("Sentiment analysis in progress...")
    
    with col2:
        if not engagement_df.empty:
            st.subheader("📈 Engagement Insights")
            # Show engagement metrics
        else:
            st.info("Engagement analysis in progress...")
    
    # Detailed data table
    if not overview_df.empty:
        st.subheader("📋 Detailed AI Trend Analysis")
        StandardComponents.data_table(
            overview_df,
            searchable=True,
            downloadable=True,
            title="AI Trend Data"
        )

def ai_insights_tab(insights_data: dict):
    """AI insights analysis tab"""
    st.subheader("🔍 AI-Generated Music Insights")
    
    if not insights_data or all(df.empty for df in insights_data.values() if isinstance(df, pd.DataFrame)):
        StandardComponents.empty_state(
            "No AI Insights Available",
            "AI insight generation is currently being processed. Please check back later.",
            "🔍"
        )
        return

    # Executive Summary
    overview_df = insights_data.get('overview', pd.DataFrame())
    if not overview_df.empty:
        st.subheader("🎯 Executive Summary")
        exec_summary = overview_df.iloc[0].get('executive_summary', 'AI analysis in progress...')
        st.markdown(f"**AI Analysis:** {exec_summary}")
        
        # Key metrics
        metrics = []
        numeric_cols = overview_df.select_dtypes(include=['number']).columns
        for col in numeric_cols[:4]:
            value = overview_df.iloc[0][col]
            metrics.append({
                "label": col.replace('_', ' ').title(),
                "value": f"{value:.1f}" if pd.notna(value) else "N/A"
            })
        StandardComponents.metric_cards(metrics, columns=4)
        st.markdown("---")

    # Key Findings
    findings_df = insights_data.get('findings', pd.DataFrame())
    if not findings_df.empty:
        st.subheader("🔑 Key AI Findings")
        for i, finding in enumerate(findings_df['finding'].head(5), 1):
            st.markdown(f"**{i}.** {finding}")

    # Artist-specific insights
    artist_insights_df = insights_data.get('artist_insights', pd.DataFrame())
    if not artist_insights_df.empty:
        st.subheader("🎤 Artist-Specific AI Insights")
        
        # Artist selector
        if 'artist_name' in artist_insights_df.columns:
            selected_artist = st.selectbox(
                "Select Artist for Detailed AI Analysis:",
                artist_insights_df['artist_name'].unique()
            )
            
            artist_data = artist_insights_df[artist_insights_df['artist_name'] == selected_artist]
            if not artist_data.empty:
                insight_data = artist_data.iloc[0]
                
                col1, col2 = st.columns([2, 1])
                with col1:
                    st.markdown(f"**AI Insight for {selected_artist}:**")
                    insight_text = insight_data.get('ai_insight', 'Generating insights...')
                    st.markdown(insight_text)
                
                with col2:
                    st.subheader("📊 Artist Metrics")
                    # Show numeric metrics
                    for col in artist_data.select_dtypes(include=['number']).columns:
                        value = insight_data[col]
                        if pd.notna(value):
                            st.metric(col.replace('_', ' ').title(), f"{float(value):.2f}")

    # Browse all insights
    if not artist_insights_df.empty:
        st.subheader("📚 Browse All AI Insights")
        StandardComponents.data_table(
            artist_insights_df,
            searchable=True,
            downloadable=True,
            title="All AI Insights"
        )

def smart_search_tab(insights_data):
    """Smart search placeholder"""
    st.subheader("🎯 Smart Search & Discovery")
    StandardComponents.empty_state(
        "Smart Search Coming Soon",
        "Advanced AI-powered search functionality is being developed.",
        "🔍"
    )

def intelligence_dashboard_tab(trend_data, insights_data):
    """Intelligence dashboard placeholder"""
    st.subheader("📊 Intelligence Dashboard Overview")
    StandardComponents.empty_state(
        "Intelligence Dashboard Coming Soon",
        "Comprehensive AI intelligence dashboard is being developed.",
        "📊"
    )
        
        **AI Features:**
        - Real-time trend detection and analysis
        - Natural language insight generation
        - Cross-platform pattern recognition
        - Sentiment-aware recommendations
        """
    )

    # Load AI data
    with st.spinner("Loading AI intelligence data..."):
        trend_data = DataManager.get_trend_summary_data()
        insights_data = DataManager.get_insights_summary_data()

    # Create tabbed interface for AI analysis
    tab_config = {
        "📈 Trend Summary": lambda: trend_summary_tab(trend_data),
        "🔍 AI Insights": lambda: ai_insights_tab(insights_data),
        "🎯 Smart Search": lambda: smart_search_tab(insights_data),
        "📊 Intelligence Dashboard": lambda: intelligence_dashboard_tab(trend_data, insights_data)
    }
    
    PageLayouts.tabbed_content(tab_config)

def trend_summary_tab(trend_data: dict):
    """AI trend summary analysis tab"""
    st.subheader("📈 AI-Generated Trend Analysis")
    
    # Check if we have any trend data
    has_data = any(not df.empty for df in trend_data.values() if isinstance(df, pd.DataFrame))
    
    if not has_data:
        StandardComponents.empty_state(
            "AI Analysis in Progress",
            "The AI is currently analyzing the latest music trends. Check back in a few minutes for fresh insights.",
            "🤖"
        )
        return

    # Overview metrics from AI analysis
    overview_df = trend_data.get('overview', pd.DataFrame())
    if not overview_df.empty:
        overview_data = overview_df.iloc[0]
        
        metrics = {
            "Analysis Date": overview_data.get('analysis_timestamp', 'N/A'),
            "Total Artists Analyzed": f"{overview_data.get('total_artists', 0):,}",
            "Trends Identified": f"{overview_data.get('trend_count', 0)}",
            "AI Confidence": f"{overview_data.get('confidence_score', 0):.1f}%"
        }
        StandardComponents.metric_cards(metrics)
        st.markdown("---")

    # Genre popularity analysis
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.subheader("🎵 Genre Popularity Trends")
        genres_df = trend_data.get('genres', pd.DataFrame())
        
        if not genres_df.empty and 'genre_name' in genres_df.columns:
            # Genre popularity pie chart
            fig = StandardCharts.create_pie_chart(
                genres_df.head(10),
                values_col='popularity_score',
                names_col='genre_name',
                title="Top Genres by AI-Calculated Popularity"
            )
            if fig:
                st.plotly_chart(fig, use_container_width=True)
                
            # Show merged entries info if available
            if 'merged_entries_count' in genres_df.columns:
                total_merged = genres_df['merged_entries_count'].sum()
                if total_merged > 0:
                    st.info(f"ℹ️ AI normalized {total_merged} duplicate genre entries for cleaner analysis")
        else:
            st.info("Genre trend data is being processed by AI...")
    
    with col2:
        st.subheader("🏆 Top Trending Artists")
        artists_df = trend_data.get('artists', pd.DataFrame())
        
        if not artists_df.empty:
            # Top artists list with AI insights
            for i, (_, artist) in enumerate(artists_df.head(8).iterrows()):
                trend_strength = artist.get('trend_strength', 0)
                sentiment = artist.get('sentiment', 0)
                
                status_color = "trend-positive" if trend_strength > 0.7 else "trend-neutral"
                
                st.markdown(f"""
                <div class="metric-card">
                    <strong>{i+1}. {artist.get('artist_name', 'Unknown')}</strong><br>
                    <span class="{status_color}">Trend Score: {trend_strength:.2f}</span><br>
                    <small>Mentions: {artist.get('mentions', 0)} | Sentiment: {sentiment:.1f}</small>
                </div>
                """, unsafe_allow_html=True)

    # Sentiment patterns analysis
    st.subheader("💭 AI Sentiment Pattern Analysis")
    sentiment_df = trend_data.get('sentiment_patterns', pd.DataFrame())
    engagement_df = trend_data.get('engagement_levels', pd.DataFrame())
    
    col1, col2 = st.columns(2)
    
    with col1:
        if not sentiment_df.empty:
            # Extract sentiment data if available
            sentiment_cols = [col for col in sentiment_df.columns if 'sentiment' in col.lower()]
            if sentiment_cols:
                st.subheader("📊 Sentiment Distribution")
                # Create a simple sentiment breakdown
                for col in sentiment_cols[:3]:  # Show top 3 sentiment columns
                    value = sentiment_df[col].iloc[0] if len(sentiment_df) > 0 else 0
                    st.metric(col.replace('_', ' ').title(), f"{value:.1f}")
            else:
                st.info("Sentiment patterns are being analyzed...")
        else:
            st.info("Sentiment analysis in progress...")
    
    with col2:
        if not engagement_df.empty:
            st.subheader("📈 Engagement Insights")
            engagement_cols = [col for col in engagement_df.columns if 'engagement' in col.lower() or 'level' in col.lower()]
            if engagement_cols:
                for col in engagement_cols[:3]:  # Show top 3 engagement metrics
                    value = engagement_df[col].iloc[0] if len(engagement_df) > 0 else 0
                    st.metric(col.replace('_', ' ').title(), f"{value:.1f}")
            else:
                st.info("Engagement patterns being calculated...")
        else:
            st.info("Engagement analysis in progress...")

    # Detailed trend data table
    if not artists_df.empty:
        st.subheader("📋 Detailed AI Trend Analysis")
        display_columns = ['artist_name', 'mentions', 'trend_strength', 'sentiment', 'platforms']
        available_columns = [col for col in display_columns if col in artists_df.columns]
        
        StandardComponents.data_table(
            artists_df,
            title="AI-Analyzed Artist Trends",
            searchable=True,
            columns=available_columns,
            max_rows=20
        )

def ai_insights_tab(insights_data: dict):
    """AI insights analysis tab"""
    st.subheader("🔍 AI-Generated Music Insights")
    
    # Check if we have insights data
    has_insights = any(not df.empty for df in insights_data.values() if isinstance(df, pd.DataFrame))
    
    if not has_insights:
        StandardComponents.empty_state(
            "AI Insights Processing",
            "The AI is generating new insights from the latest music data. Fresh insights will appear here soon.",
            "🧠"
        )
        return

    # Overview insights
    overview_df = insights_data.get('overview', pd.DataFrame())
    if not overview_df.empty:
        overview_data = overview_df.iloc[0]
        
        st.subheader("🎯 Executive Summary")
        exec_summary = overview_data.get('executive_summary', 'No summary available')
        st.markdown(f"**AI Analysis:** {exec_summary}")
        
        # Key metrics from overview
        metrics = {
            "Analysis Timestamp": overview_data.get('analysis_timestamp', 'N/A'),
            "Data Points": f"{overview_data.get('total_data_points', 0):,}",
            "Insights Generated": f"{overview_data.get('insights_count', 0)}",
            "Confidence Level": f"{overview_data.get('confidence_score', 0):.1f}%"
        }
        StandardComponents.metric_cards(metrics, columns=4)
        st.markdown("---")

    # Key findings section
    findings_df = insights_data.get('findings', pd.DataFrame())
    if not findings_df.empty:
        st.subheader("🔑 Key AI Findings")
        
        findings_data = findings_df.iloc[0]
        key_findings = []
        
        # Extract key findings columns
        finding_cols = [col for col in findings_df.columns if 'finding' in col.lower() or 'insight' in col.lower()]
        for col in finding_cols:
            finding = findings_data.get(col, '')
            if finding and str(finding).strip() and str(finding) != 'nan':
                key_findings.append(finding)
        
        if key_findings:
            for i, finding in enumerate(key_findings[:5], 1):  # Show top 5 findings
                st.markdown(f"**{i}.** {finding}")
        else:
            st.info("Key findings are being generated by AI...")

    # Artist insights section
    artist_insights_df = insights_data.get('artist_insights', pd.DataFrame())
    if not artist_insights_df.empty:
        st.subheader("🎤 Artist-Specific AI Insights")
        
        # Artist selector for insights
        unique_artists = artist_insights_df['artist_name'].unique() if 'artist_name' in artist_insights_df.columns else []
        
        if len(unique_artists) > 0:
            selected_artist = st.selectbox(
                "Select an artist for AI insights:",
                options=unique_artists
            )
            
            if selected_artist:
                artist_data = artist_insights_df[artist_insights_df['artist_name'] == selected_artist]
                
                if not artist_data.empty:
                    insight_data = artist_data.iloc[0]
                    
                    col1, col2 = st.columns([2, 1])
                    
                    with col1:
                        # Display AI insight text
                        insight_text = insight_data.get('insight_text', 'No specific insights available')
                        st.markdown(f"**AI Insight for {selected_artist}:**")
                        st.markdown(insight_text)
                        
                        # Additional insight fields
                        insight_fields = ['trend_analysis', 'sentiment_summary', 'recommendation']
                        for field in insight_fields:
                            if field in insight_data and str(insight_data[field]) not in ['', 'nan', 'None']:
                                st.markdown(f"**{field.replace('_', ' ').title()}:** {insight_data[field]}")
                    
                    with col2:
                        # Artist metrics
                        st.subheader("📊 Artist Metrics")
                        
                        metrics_to_show = ['mention_count', 'sentiment_score', 'trend_strength', 'confidence_score']
                        for metric in metrics_to_show:
                            if metric in insight_data:
                                value = insight_data[metric]
                                if pd.notna(value):
                                    label = metric.replace('_', ' ').title()
                                    st.metric(label, f"{float(value):.2f}")

        # Browse all insights
        st.subheader("📚 Browse All AI Insights")
        display_columns = ['artist_name', 'insight_text', 'confidence_score', 'analysis_timestamp']
        available_columns = [col for col in display_columns if col in artist_insights_df.columns]
        
        StandardComponents.data_table(
            artist_insights_df,
            title="All Artist Insights",
            searchable=True,
            columns=available_columns,
            max_rows=15
        )

def smart_search_tab(insights_data: dict):
    """Smart search across all AI insights"""
    st.subheader("🎯 Smart Insight Search")
    
    artist_insights_df = insights_data.get('artist_insights', pd.DataFrame())
    
    if artist_insights_df.empty:
        StandardComponents.empty_state(
            "No Search Data Available",
            "AI insights are still being generated. Search will be available once insights are ready.",
            "🔍"
        )
        return

    # Search interface
    col1, col2 = st.columns([3, 1])
    
    with col1:
        search_query = st.text_input("🔍 Search insights, artists, or trends:", 
                                   placeholder="e.g., 'positive sentiment', 'trending up', 'rock music'")
    
    with col2:
        search_mode = st.selectbox("Search Mode:", ["Text Content", "Artist Names", "All Fields"])

    # Perform search
    if search_query:
        try:
            search_results = perform_smart_search(artist_insights_df, search_query, search_mode)
            
            if not search_results.empty:
                st.success(f"Found {len(search_results)} results for '{search_query}'")
                
                # Display search results
                for i, (_, result) in enumerate(search_results.iterrows()):
                    with st.expander(f"Result {i+1}: {result.get('artist_name', 'Unknown Artist')}", expanded=i < 3):
                        st.markdown(f"**Artist:** {result.get('artist_name', 'N/A')}")
                        
                        insight_text = result.get('insight_text', '')
                        if insight_text:
                            # Highlight search terms
                            highlighted_text = highlight_search_terms(insight_text, search_query)
                            st.markdown(f"**Insight:** {highlighted_text}", unsafe_allow_html=True)
                        
                        # Show additional metrics
                        metrics_cols = ['sentiment_score', 'confidence_score', 'analysis_timestamp']
                        for col in metrics_cols:
                            if col in result and pd.notna(result[col]):
                                st.markdown(f"**{col.replace('_', ' ').title()}:** {result[col]}")
                
                # Generate word cloud from search results
                if len(search_results) > 3:
                    generate_search_wordcloud(search_results)
                    
            else:
                st.warning(f"No results found for '{search_query}'. Try different keywords or search terms.")
        
        except Exception as e:
            st.error(f"Search error: {str(e)}")
    else:
        st.info("Enter a search term to find relevant insights and trends.")

def intelligence_dashboard_tab(trend_data: dict, insights_data: dict):
    """Combined intelligence dashboard"""
    st.subheader("📊 AI Intelligence Dashboard")
    
    # Overview metrics combining both data sources
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("📈 Trend Intelligence")
        artists_df = trend_data.get('artists', pd.DataFrame())
        genres_df = trend_data.get('genres', pd.DataFrame())
        
        if not artists_df.empty:
            trend_metrics = {
                "Trending Artists": len(artists_df),
                "Active Genres": len(genres_df) if not genres_df.empty else 0,
                "Avg Trend Strength": f"{artists_df['trend_strength'].mean():.2f}" if 'trend_strength' in artists_df.columns else "N/A"
            }
            StandardComponents.metric_cards(trend_metrics, columns=3)
    
    with col2:
        st.subheader("🔍 Insight Intelligence")
        artist_insights_df = insights_data.get('artist_insights', pd.DataFrame())
        
        if not artist_insights_df.empty:
            insight_metrics = {
                "Total Insights": len(artist_insights_df),
                "Unique Artists": artist_insights_df['artist_name'].nunique() if 'artist_name' in artist_insights_df.columns else 0,
                "Avg Confidence": f"{artist_insights_df['confidence_score'].mean():.1f}%" if 'confidence_score' in artist_insights_df.columns else "N/A"
            }
            StandardComponents.metric_cards(insight_metrics, columns=3)

    # Combined visualization
    if not artists_df.empty and 'artist_name' in artists_df.columns:
        # Top artists by AI metrics
        fig = StandardCharts.create_scatter_plot(
            artists_df.head(20),
            x_col='mentions',
            y_col='trend_strength',
            title="AI Intelligence Map: Artist Mentions vs Trend Strength",
            hover_data=['artist_name', 'sentiment'] if 'sentiment' in artists_df.columns else ['artist_name'],
            size_col='sentiment' if 'sentiment' in artists_df.columns else None
        )
        if fig:
            st.plotly_chart(fig, use_container_width=True)

    # Quick insights summary
    if not artist_insights_df.empty:
        st.subheader("⚡ Quick Insights")
        
        # Show a few random insights
        sample_insights = artist_insights_df.sample(min(3, len(artist_insights_df)))
        
        for _, insight in sample_insights.iterrows():
            artist_name = insight.get('artist_name', 'Unknown')
            insight_text = insight.get('insight_text', 'No insight available')
            
            st.markdown(f"**{artist_name}:** {insight_text[:200]}...")

def perform_smart_search(df: pd.DataFrame, query: str, mode: str) -> pd.DataFrame:
    """Perform intelligent search across insights data"""
    if df.empty:
        return df
    
    query_lower = query.lower()
    
    if mode == "Artist Names":
        # Search in artist names only
        if 'artist_name' in df.columns:
            mask = df['artist_name'].str.lower().str.contains(query_lower, na=False, regex=False)
            return df[mask]
    
    elif mode == "Text Content":
        # Search in insight text only
        if 'insight_text' in df.columns:
            mask = df['insight_text'].str.lower().str.contains(query_lower, na=False, regex=False)
            return df[mask]
    
    else:  # All Fields
        # Search across all text columns
        text_columns = df.select_dtypes(include=['object']).columns
        mask = pd.Series([False] * len(df))
        
        for col in text_columns:
            col_mask = df[col].astype(str).str.lower().str.contains(query_lower, na=False, regex=False)
            mask = mask | col_mask
        
        return df[mask]
    
    return pd.DataFrame()

def highlight_search_terms(text: str, search_query: str) -> str:
    """Highlight search terms in text"""
    if not text or not search_query:
        return text
    
    # Simple highlighting - make search terms bold
    words = search_query.lower().split()
    highlighted = text
    
    for word in words:
        if len(word) > 2:  # Only highlight words longer than 2 characters
            pattern = re.compile(re.escape(word), re.IGNORECASE)
            highlighted = pattern.sub(f"**{word}**", highlighted)
    
    return highlighted

def generate_search_wordcloud(search_results: pd.DataFrame):
    """Generate word cloud from search results"""
    if search_results.empty or 'insight_text' not in search_results.columns:
        return
    
    # Combine all insight text
    text_data = ' '.join(search_results['insight_text'].dropna().astype(str))
    
    if len(text_data.strip()) > 10:  # Only generate if we have enough text
        st.subheader("☁️ Search Results Word Cloud")
        
        try:
            wordcloud = WordCloud(
                width=800, 
                height=400, 
                background_color='white',
                colormap='viridis'
            ).generate(text_data)
            
            fig, ax = plt.subplots(figsize=(10, 5))
            ax.imshow(wordcloud, interpolation='bilinear')
            ax.axis('off')
            st.pyplot(fig)
            plt.close()
            
        except Exception as e:
            st.warning(f"Could not generate word cloud: {e}")
