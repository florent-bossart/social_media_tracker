"""
AI Intelligence Center - Consolidated AI analysis page.
Combines AI Trend Summary and AI Insights into a unified intelligent dashboard.
"""

import streamlit as st
import pandas as pd
import re
from wordcloud import WordCloud
import matplotlib.pyplot as plt
from ui_library import (
    StandardComponents, StandardCharts, PageLayouts, UITheme
)
from data_manager import DataManager

def ai_intelligence_center_page():
    """Unified AI intelligence page with trend summaries and insights"""

    # Page header
    StandardComponents.page_header(
        title="AI Intelligence Center",
        icon="🤖",
        description="**Your AI-Powered Music Intelligence Hub** - Advanced insights generated by artificial intelligence."
    )

    # Load AI data
    with st.spinner("Loading AI intelligence data..."):
        trend_data = DataManager.get_trend_summary_data()
        insights_data = DataManager.get_insights_summary_data()

    # Create tabbed interface for AI analysis
    tab_config = {
        "📈 Trend Summary": lambda: trend_summary_tab(trend_data),
        "🔍 AI Insights": lambda: ai_insights_tab(insights_data),
        "🎯 Smart Search": lambda: smart_search_tab(insights_data),
        "📊 Intelligence Dashboard": lambda: intelligence_dashboard_tab(trend_data, insights_data)
    }

    PageLayouts.tabbed_content(tab_config)

def trend_summary_tab(trend_data: dict):
    """AI-generated trend summary analysis tab"""
    st.subheader("📈 AI-Generated Trend Analysis")

    if not trend_data or all(df.empty for df in trend_data.values() if isinstance(df, pd.DataFrame)):
        StandardComponents.empty_state(
            "No AI Trend Data Available",
            "AI trend analysis is currently being processed. Please check back later.",
            "📈"
        )
        return

    # Overview metrics
    overview_df = trend_data.get('overview', pd.DataFrame())
    if not overview_df.empty:
        metrics = []
        for _, row in overview_df.head(4).iterrows():
            metrics.append({
                "label": row.get('metric_name', 'Metric'),
                "value": row.get('value', 0),
                "delta": row.get('change', 0)
            })
        StandardComponents.metric_cards(metrics)
        st.markdown("---")

    # Genre and Artist Analysis
    col1, col2 = st.columns([2, 1])

    with col1:
        st.subheader("🎵 Genre Popularity Trends")
        genres_df = trend_data.get('genres', pd.DataFrame())
        if not genres_df.empty:
            # Create genre popularity chart
            fig = StandardCharts.create_pie_chart(
                genres_df,
                values='popularity_score',
                names='genre',
                title="Genre Distribution (AI Normalized)"
            )
            st.plotly_chart(fig, use_container_width=True)

            # Show normalization info
            if 'normalized_count' in genres_df.columns:
                total_merged = genres_df['normalized_count'].sum()
                if total_merged > 0:
                    st.info(f"ℹ️ AI normalized {total_merged} duplicate genre entries for cleaner analysis")

    with col2:
        st.subheader("🏆 Top Trending Artists")
        artists_df = trend_data.get('artists', pd.DataFrame())
        if not artists_df.empty:
            for _, artist in artists_df.head(5).iterrows():
                st.metric(
                    artist.get('artist_name', 'Unknown'),
                    f"{artist.get('trend_score', 0):.1f}",
                    f"{artist.get('growth_rate', 0):+.1f}%"
                )

    # Detailed data table
    if not overview_df.empty:
        st.subheader("📋 Detailed AI Trend Analysis")
        StandardComponents.data_table(
            overview_df,
            searchable=True,
            downloadable=True,
            title="AI Trend Data"
        )

def ai_insights_tab(insights_data: dict):
    """AI insights analysis tab"""
    st.subheader("🔍 AI-Generated Music Insights")

    if not insights_data or all(df.empty for df in insights_data.values() if isinstance(df, pd.DataFrame)):
        StandardComponents.empty_state(
            "No AI Insights Available",
            "AI insight generation is currently being processed. Please check back later.",
            "🔍"
        )
        return

    # Executive Summary
    overview_df = insights_data.get('overview', pd.DataFrame())
    if not overview_df.empty:
        st.subheader("🎯 Executive Summary")
        exec_summary = overview_df.iloc[0].get('executive_summary', 'AI analysis in progress...')
        st.markdown(f"**AI Analysis:** {exec_summary}")

        # Key metrics
        metrics = []
        numeric_cols = overview_df.select_dtypes(include=['number']).columns
        for col in numeric_cols[:4]:
            value = overview_df.iloc[0][col]
            metrics.append({
                "label": col.replace('_', ' ').title(),
                "value": f"{value:.1f}" if pd.notna(value) else "N/A"
            })
        StandardComponents.metric_cards(metrics, columns=4)
        st.markdown("---")

    # Key Findings
    findings_df = insights_data.get('findings', pd.DataFrame())
    if not findings_df.empty:
        st.subheader("🔑 Key AI Findings")
        for i, finding in enumerate(findings_df['finding'].head(5), 1):
            st.markdown(f"**{i}.** {finding}")

    # Artist-specific insights
    artist_insights_df = insights_data.get('artist_insights', pd.DataFrame())
    if not artist_insights_df.empty:
        st.subheader("🎤 Artist-Specific AI Insights")

        # Artist selector
        if 'artist_name' in artist_insights_df.columns:
            selected_artist = st.selectbox(
                "Select Artist for Detailed AI Analysis:",
                artist_insights_df['artist_name'].unique()
            )

            artist_data = artist_insights_df[artist_insights_df['artist_name'] == selected_artist]
            if not artist_data.empty:
                insight_data = artist_data.iloc[0]

                col1, col2 = st.columns([2, 1])
                with col1:
                    st.markdown(f"**AI Insight for {selected_artist}:**")
                    insight_text = insight_data.get('ai_insight', 'Generating insights...')
                    st.markdown(insight_text)

                with col2:
                    st.subheader("📊 Artist Metrics")
                    # Show numeric metrics
                    for col in artist_data.select_dtypes(include=['number']).columns:
                        value = insight_data[col]
                        if pd.notna(value):
                            st.metric(col.replace('_', ' ').title(), f"{float(value):.2f}")

    # Browse all insights
    if not artist_insights_df.empty:
        st.subheader("📚 Browse All AI Insights")
        StandardComponents.data_table(
            artist_insights_df,
            searchable=True,
            downloadable=True,
            title="All AI Insights"
        )

def smart_search_tab(insights_data: dict):
    """Smart search and discovery interface"""
    st.subheader("🎯 Smart Insight Search")

    artist_insights_df = insights_data.get('artist_insights', pd.DataFrame())
    if artist_insights_df.empty:
        StandardComponents.empty_state(
            "No Search Data Available",
            "AI insights are being processed. Search will be available once data is ready.",
            "🔍"
        )
        return

    # Search interface
    col1, col2 = st.columns([3, 1])
    with col1:
        search_query = st.text_input("🔍 Search insights, artists, or trends:",
                                   placeholder="e.g., 'rock music trends', 'Taylor Swift', 'rising genres'")
    with col2:
        search_mode = st.selectbox("Search Mode:", ["Text Content", "Artist Names", "All Fields"])

    if search_query:
        try:
            search_results = perform_smart_search(artist_insights_df, search_query, search_mode)
            if not search_results.empty:
                st.success(f"Found {len(search_results)} results for '{search_query}'")

                # Display results
                for i, (_, result) in enumerate(search_results.iterrows()):
                    with st.expander(f"Result {i+1}: {result.get('artist_name', 'Unknown Artist')}", expanded=i < 3):
                        st.markdown(f"**Artist:** {result.get('artist_name', 'N/A')}")

                        # Show insight text
                        insight_text = result.get('ai_insight', 'No insight available')
                        st.markdown(f"**Insight:** {insight_text}")

                        # Show additional fields
                        for col in ['genre', 'platform', 'trend_score']:
                            if col in result and pd.notna(result[col]):
                                st.markdown(f"**{col.replace('_', ' ').title()}:** {result[col]}")

                # Word cloud of search results
                st.subheader("☁️ Search Results Word Cloud")
                generate_search_wordcloud(search_results)
            else:
                st.warning(f"No results found for '{search_query}'. Try different keywords or search terms.")
        except Exception as e:
            st.error(f"Search error: {str(e)}")
    else:
        st.info("Enter a search term to find relevant insights and trends.")

        # Show sample insights
        if not artist_insights_df.empty:
            st.subheader("💡 Sample AI Insights")
            for _, row in artist_insights_df.head(3).iterrows():
                artist_name = row.get('artist_name', 'Unknown')
                insight_text = row.get('ai_insight', 'No insight available')
                st.markdown(f"**{artist_name}:** {insight_text[:200]}...")

def intelligence_dashboard_tab(trend_data: dict, insights_data: dict):
    """Intelligence dashboard overview"""
    st.subheader("📊 AI Intelligence Dashboard")

    col1, col2 = st.columns(2)

    with col1:
        st.subheader("📈 Trend Intelligence")
        artists_df = trend_data.get('artists', pd.DataFrame())
        genres_df = trend_data.get('genres', pd.DataFrame())

        if not artists_df.empty or not genres_df.empty:
            trend_metrics = [
                {"label": "Trending Artists", "value": len(artists_df)},
                {"label": "Active Genres", "value": len(genres_df)},
                {"label": "AI Insights", "value": "Live"}
            ]
            StandardComponents.metric_cards(trend_metrics, columns=3)

    with col2:
        st.subheader("🔍 Insight Intelligence")
        artist_insights_df = insights_data.get('artist_insights', pd.DataFrame())

        if not artist_insights_df.empty:
            insight_metrics = [
                {"label": "Total Insights", "value": len(artist_insights_df)},
                {"label": "AI Generated", "value": "100%"},
                {"label": "Updated", "value": "Real-time"}
            ]
            StandardComponents.metric_cards(insight_metrics, columns=3)

    # Intelligence visualization
    if not artist_insights_df.empty:
        st.subheader("🎯 AI Intelligence Map")

        # Create scatter plot of insights if numeric data available
        numeric_cols = artist_insights_df.select_dtypes(include=['number']).columns
        if len(numeric_cols) >= 2:
            fig = StandardCharts.create_scatter_plot(
                artist_insights_df,
                x=numeric_cols[0],
                y=numeric_cols[1],
                color='artist_name',
                title="AI Intelligence Mapping"
            )
            st.plotly_chart(fig, use_container_width=True)

    # Quick insights
    st.subheader("⚡ Quick Insights")
    _display_quick_insights(trend_data, insights_data)

def _display_quick_insights(trend_data: dict, insights_data: dict):
    """Display quick AI-generated insights"""

    # Check if we have trend data
    has_data = any(not df.empty for df in trend_data.values() if isinstance(df, pd.DataFrame))

    if has_data:
        # Genre insights
        genres_df = trend_data.get('genres', pd.DataFrame())
        if not genres_df.empty:
            st.info("Genre trend data is being processed by AI...")
            with st.expander("📊 Genre Trends Preview"):
                if 'popularity_score' in genres_df.columns:
                    top_genre = genres_df.loc[genres_df['popularity_score'].idxmax()]
                    st.markdown(f"**Top Genre:** {top_genre.get('genre', 'Unknown')} (Score: {top_genre.get('popularity_score', 0):.1f})")

    # Check if we have insights data
    has_insights = any(not df.empty for df in insights_data.values() if isinstance(df, pd.DataFrame))

    if has_insights:
        findings_df = insights_data.get('findings', pd.DataFrame())
        if not findings_df.empty:
            st.subheader("🔑 Latest AI Findings")
            for i, finding in enumerate(findings_df['finding'].head(3), 1):
                st.markdown(f"**{i}.** {finding}")
        else:
            st.info("Key findings are being generated by AI...")

def perform_smart_search(df: pd.DataFrame, query: str, mode: str) -> pd.DataFrame:
    """Perform intelligent search across insights data"""
    if df.empty or not query.strip():
        return pd.DataFrame()

    query = query.lower().strip()

    try:
        if mode == "Artist Names":
            if 'artist_name' in df.columns:
                mask = df['artist_name'].str.lower().str.contains(query, na=False)
        elif mode == "Text Content":
            mask = pd.Series([False] * len(df))
            for col in df.select_dtypes(include=['object']).columns:
                mask |= df[col].astype(str).str.lower().str.contains(query, na=False)
        else:  # All Fields
            mask = pd.Series([False] * len(df))
            for col in df.columns:
                mask |= df[col].astype(str).str.lower().str.contains(query, na=False)

        return df[mask].head(20)  # Limit results
    except Exception:
        return pd.DataFrame()

def generate_search_wordcloud(search_results: pd.DataFrame):
    """Generate word cloud from search results"""
    try:
        # Combine all text content
        all_text = ""
        for col in search_results.select_dtypes(include=['object']).columns:
            all_text += " " + " ".join(search_results[col].astype(str).values)

        if all_text.strip():
            # Clean and prepare text
            words = re.findall(r'\b\w+\b', all_text.lower())
            word_freq = {}
            for word in words:
                if len(word) > 3:  # Filter short words
                    word_freq[word] = word_freq.get(word, 0) + 1

            if word_freq:
                wordcloud = WordCloud(
                    width=800, height=400,
                    background_color='white',
                    max_words=50,
                    colormap='viridis'
                ).generate_from_frequencies(word_freq)

                fig, ax = plt.subplots(figsize=(10, 5))
                ax.imshow(wordcloud, interpolation='bilinear')
                ax.axis('off')
                st.pyplot(fig)
                plt.close()
    except Exception as e:
        st.warning(f"Could not generate word cloud: {e}")
