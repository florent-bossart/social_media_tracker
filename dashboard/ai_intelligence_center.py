"""
AI Intelligence Center - Consolidated AI analysis page.
Combines AI Trend Summary and AI Insights into a unified intelligent dashboard.
"""

import streamlit as st
import pandas as pd
import re
from wordcloud import WordCloud
import matplotlib.pyplot as plt
from ui_library import (
    StandardComponents, StandardCharts, PageLayouts, UITheme
)
from data_manager import DataManager

def ai_intelligence_center_page():
    """Unified AI intelligence page with trend summaries and insights"""

    # Page header
    StandardComponents.page_header(
        title="AI Intelligence Center",
        icon="🤖",
        description="Your AI-Powered Music Intelligence Hub - Advanced insights generated by artificial intelligence."
    )

    # Load AI data
    with st.spinner("Loading AI intelligence data..."):
        trend_data = DataManager.get_trend_summary_data()
        insights_data = DataManager.get_insights_summary_data()

    # Create tabbed interface for AI analysis
    tab_config = {
        "📈 Trend Summary": lambda: trend_summary_tab(trend_data),
        "🔍 AI Insights": lambda: ai_insights_tab(insights_data),
        "🎯 Smart Search": lambda: smart_search_tab(insights_data),
        "📊 Intelligence Dashboard": lambda: intelligence_dashboard_tab(trend_data, insights_data)
    }

    PageLayouts.tabbed_content(tab_config)

def trend_summary_tab(trend_data: dict):
    """AI-generated trend summary analysis tab"""
    st.subheader("📈 AI-Generated Trend Analysis")

    if not trend_data or all(df.empty for df in trend_data.values() if isinstance(df, pd.DataFrame)):
        StandardComponents.empty_state(
            "No AI Trend Data Available",
            "AI trend analysis is currently being processed. Please check back later.",
            "📈"
        )
        return

    # Show available data
    for key, df in trend_data.items():
        if isinstance(df, pd.DataFrame) and not df.empty:
            st.subheader(f"📊 {key.replace('_', ' ').title()}")
            st.dataframe(df.head(10))

def ai_insights_tab(insights_data: dict):
    """AI insights analysis tab"""
    st.subheader("🔍 AI-Generated Music Insights")

    if not insights_data or all(df.empty for df in insights_data.values() if isinstance(df, pd.DataFrame)):
        StandardComponents.empty_state(
            "No AI Insights Available",
            "AI insight generation is currently being processed. Please check back later.",
            "🔍"
        )
        return

    # Show available data
    for key, df in insights_data.items():
        if isinstance(df, pd.DataFrame) and not df.empty:
            st.subheader(f"🔍 {key.replace('_', ' ').title()}")
            st.dataframe(df.head(10))

def smart_search_tab(insights_data: dict):
    """Smart search and discovery interface"""
    st.subheader("🎯 Smart Insight Search")

    artist_insights_df = insights_data.get('artist_insights', pd.DataFrame())
    if artist_insights_df.empty:
        StandardComponents.empty_state(
            "No Search Data Available",
            "AI insights are being processed. Search will be available once data is ready.",
            "🔍"
        )
        return

    # Search interface
    search_query = st.text_input("🔍 Search insights, artists, or trends:",
                               placeholder="e.g., 'rock music trends', 'Taylor Swift', 'rising genres'")

    if search_query:
        try:
            search_results = perform_smart_search(artist_insights_df, search_query)
            if not search_results.empty:
                st.success(f"Found {len(search_results)} results for '{search_query}'")

                # Display results
                for i, (_, result) in enumerate(search_results.iterrows()):
                    with st.expander(f"Result {i+1}: {result.get('artist_name', 'Unknown Artist')}", expanded=i < 3):
                        st.markdown(f"**Artist:** {result.get('artist_name', 'N/A')}")
                        insight_text = result.get('ai_insight', 'No insight available')
                        st.markdown(f"**Insight:** {insight_text}")
            else:
                st.warning(f"No results found for '{search_query}'. Try different keywords or search terms.")
        except Exception as e:
            st.error(f"Search error: {str(e)}")
    else:
        st.info("Enter a search term to find relevant insights and trends.")

def intelligence_dashboard_tab(trend_data: dict, insights_data: dict):
    """Intelligence dashboard overview"""
    st.subheader("📊 AI Intelligence Dashboard")

    col1, col2 = st.columns(2)

    with col1:
        st.subheader("📈 Trend Intelligence")
        artists_df = trend_data.get('artists', pd.DataFrame())
        genres_df = trend_data.get('genres', pd.DataFrame())

        if not artists_df.empty or not genres_df.empty:
            trend_metrics = {
                "Trending Artists": len(artists_df),
                "Active Genres": len(genres_df),
                "AI Insights": "Live"
            }
            StandardComponents.metric_cards(trend_metrics, columns=3)

    with col2:
        st.subheader("🔍 Insight Intelligence")
        artist_insights_df = insights_data.get('artist_insights', pd.DataFrame())

        if not artist_insights_df.empty:
            insight_metrics = {
                "Total Insights": len(artist_insights_df),
                "AI Generated": "100%",
                "Updated": "Real-time"
            }
            StandardComponents.metric_cards(insight_metrics, columns=3)
            StandardComponents.metric_cards(insight_metrics, columns=3)

    # Show available data
    st.subheader("Available Data")
    for key, df in {**trend_data, **insights_data}.items():
        if isinstance(df, pd.DataFrame) and not df.empty:
            st.markdown(f"- **{key.replace('_', ' ').title()}**: {len(df)} records")

def perform_smart_search(df: pd.DataFrame, query: str) -> pd.DataFrame:
    """Perform intelligent search across insights data"""
    if df.empty or not query.strip():
        return pd.DataFrame()

    query = query.lower().strip()

    try:
        mask = pd.Series([False] * len(df))
        for col in df.columns:
            mask |= df[col].astype(str).str.lower().str.contains(query, na=False)

        return df[mask].head(20)  # Limit results
    except Exception:
        return pd.DataFrame()
